default:            # Default options for all jobs.
  image: openjdk:latest

stages:             # List of stages for jobs, and their order of execution.
  - lint
  - build
  - test
  - cover
  - package
  - release

lint-job:           # This job lints, or scans your code to ensure good coding practices.
  stage: lint       # It makes your code conform to the Google Java Style.
  script:
    - curl -LO https://repo.maven.apache.org/maven2/com/google/googlejavaformat/google-java-format/1.17.0/google-java-format-1.17.0-all-deps.jar
    - |
      java \
      --add-exports=jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED \
      --add-exports=jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED \
      --add-exports=jdk.compiler/com.sun.tools.javac.main=ALL-UNNAMED \
      --add-exports=jdk.compiler/com.sun.tools.javac.model=ALL-UNNAMED \
      --add-exports=jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED \
      --add-exports=jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED \
      --add-exports=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED \
      --add-exports=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED \
      --add-opens=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED \
      --add-opens=jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED \
      -jar google-java-format-1.17.0-all-deps.jar src/app/*.java test/app/*.java

build-job:          # This job builds the .class files for your source code.
  stage: build
  script:
    - javac -d bin src/app/*.java
  artifacts:
    paths:
      - bin
    expire_in: 5 min

test-job:           # This job builds the .class files for your test code and runs the tests with instrumentation.
  stage: test
  dependencies:
    - build-job
  needs:
    - build-job
  script:
    - curl -LO https://repo.maven.apache.org/maven2/org/junit/platform/junit-platform-console-standalone/1.9.3/junit-platform-console-standalone-1.9.3.jar
    - curl -LO https://repo.maven.apache.org/maven2/org/jacoco/org.jacoco.agent/0.8.9/org.jacoco.agent-0.8.9-runtime.jar
    - javac -d bin -cp bin:junit-platform-console-standalone-1.9.3.jar test/app/*.java
    - java -javaagent:org.jacoco.agent-0.8.9-runtime.jar -jar junit-platform-console-standalone-1.9.3.jar --class-path=bin --scan-classpath --fail-if-no-tests
  artifacts:
    paths:
      - bin
      - jacoco.exec
    expire_in: 5 min

cover-job:          # This job generates a HTML code coverage report.
  stage: cover
  dependencies:
    - test-job
  needs:
    - test-job
  script:
    - curl -LO https://repo.maven.apache.org/maven2/org/jacoco/org.jacoco.cli/0.8.9/org.jacoco.cli-0.8.9-nodeps.jar
    - rm bin/app/*Test.class bin/app/Driver.class
    - java -jar org.jacoco.cli-0.8.9-nodeps.jar report jacoco.exec --classfiles bin --sourcefiles src --html coverage-report
    - cat coverage-report/index.html  # This tells GitLab the code coverage percentage (for the coverage badge).
  coverage: '/Total.*?([0-9]{1,3})%/'
  artifacts:
    paths:
      - coverage-report
    expire_in: 5 min

package-job:        # This job generates a runnable jar of the project.
  stage: package
  dependencies:
    - build-job
  needs:
    - test-job
  script:
    - cd bin
    - mkdir META-INF
    - echo -e "Manifest-Version":" 1.0\nMain-Class":" app.Driver\n" > META-INF/MANIFEST.MF
    - jar -cmf META-INF/MANIFEST.MF ../blogging-project.jar app/*.class
  artifacts:
    paths:
      - blogging-project.jar
    expire_in: 5 min  # The default value is 30 days, but the latest successful pipeline artifacts are kept forever.

container-job:      # This job generates a Docker container of the project.
  stage: package
  image: docker:latest
  needs:
    - test-job
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - export

release-job:        # This job automatically creates a release on GitLab when a Git tag is pushed up.
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG
  needs:
    - test-job
  release:
    tag_name: $CI_COMMIT_TAG
    name: 'Blogging Project ${CI_COMMIT_TAG:1}'
    description: 'Sample release for blogging project.'
    assets:
      links:
        # Artifacts associated with a tag/release are saved by GitLab regardless of expiry date.
        - name: 'blogging-project.jar (raw file download)'
          url: 'https://gitlab.com/chrislattman/blogging-project/-/jobs/artifacts/${CI_COMMIT_TAG}/raw/blogging-project.jar?job=package-job'
          link_type: 'package'
        - name: 'blogging-project.jar (view file in pipeline)'
          url: 'https://gitlab.com/chrislattman/blogging-project/-/jobs/artifacts/${CI_COMMIT_TAG}/file/blogging-project.jar?job=package-job'
          link_type: 'package'
